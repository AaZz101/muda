#!/usr/bin/env python
# -*- encoding: utf-8 -*-
# CREATED:2015-02-04 14:22:10 by Brian McFee <brian.mcfee@nyu.edu>
'''Utility transformers'''

from ..base import BaseTransformer

__all__ = ['Bypass']


class Bypass(BaseTransformer):
    r'''Bypass transformer.  Wraps an existing transformer object.

    This allows pipeline stages to become optional.

    [jam] --> Transformer 1 --> [jam_1] --> Transformer 2
          \                            /
           `--> Bypass transformer ---'
    '''

    def __init__(self, transformer):
        '''Bypass transformer'''

        if not isinstance(transformer, BaseTransformer):
            raise TypeError('transformer must be a BaseTransformer object')

        BaseTransformer.__init__(self)

        self.transformer = transformer

    def transform(self, jam):
        '''Bypass transformations.

        Parameters
        ----------
        jam : pyjams.JAMS
            A muda-enabled JAMS object

        Generates
        ---------
        jam_out : pyjams.JAMS iterator
            The first result is `jam` (unmodified), by reference
            All subsequent results are generated by `transformer`
        '''
        # Step 1: yield the unmodified jam
        yield jam

        # Step 2: yield from the transformer
        for jam_out in self.transformer.transform(jam):
            yield jam_out
